#pragma once
#define CASE_ITEMNAME std::uint32_t(1111)

namespace BuildMathModel {
	struct BuildParams
	{
		double diam = 50.0;
		double length = 265;
		int colorScheme = 1;
		int variantsConf = 1;
		int variantsConfB = 1;
	};

	struct BuildParamsForHeatExchangerTTOR
	{
		std::string name;

		double ttDiam;         // 2  - Диаметр теплообменных труб
		double ttThickness;    // 3  - Толщина теплообменных труб
		double ktDiam;         // 4  - Диаметр кожуховых труб
		double ktThickness;    // 5  - Толщина кожуховых труб
		double lK;             // 6  - Длина кожуховых труб
		double L;              // 7  - Общая длина аппарата примерно * (Значение не используется в рассчетах)
		double dV;             // 8  - Диаметр камеры
		double dU;             // 9  - Диаметр фланца соединительного
		double H;              // 10 - Высота фланца соединительного
		double H1;             // 11 - Высота опоры от центра (H1 * 2 = целая высота)
		double l0;             // 12 - Расстояние между опорами
		double l1;             // 13 - Расстояние между фланцем боковым и фланцем соединительным
		double l2;             // 14 - Расстояние между фланцем соединительным и опорой
		double l3;             // 15 - Длина камеры
		double t;              // 16 - Расстояние между трубами
	};
	struct ConfigParams
	{
		std::string name;

		double assortmentInnerTubes;    // 1 - Диаметр теплообменной трубы
		double thicknessInnerTubes;     // 2 - Толщина теплообменной трубы
		double assortmentOuterTubes;    // 3 - Диаметр кожуховой трубы
		double thicknessOuterTubes;     // 4 - Толщина кожуховой трубы
		double assortmentCamera;        // 5 - Диаметр камер  
		double thicknessCamera;         // 6 - Толщина стенок камер
		
		double lengthK;                 // 7 - Длина кожуховой трубы
		double length0;                 // 8 - Расстояние между опорами
		double LENGTH;                  // 9 - Общая длина аппарата

		double diametrY;                // 10 - Диаметр входной/выходной трубы
		double t;                       // 11 - Расстояние между трубами

		double length1;                 // 12 - Расстояние между камерой распределительной и опорой
		double length2;                 // 13 - Длинна распределительной камеры
		double length3;                 // 14 - Длинна поворотной камеры
	};


	struct ConfigParams_IP
	{
		std::string name;
		double Dv_Kzh;
		double L_Base;//длина кожуха
		double s;//толщина стенки
		double p;//давление
		double DKr;//внутренний диаметр камеры

		//расстояния для фланцев внизу кожух:
		int l0;
		//	int l = 350;
		int l2;
		int l3;
		//для фланцев
		double Dn;
		double Dy;

	};

	struct ConfigParams_IU
	{
		std::string name;
		double p = 1.6;
		double diam = 800;
		double Length = 5395.;
		double D_Kam = 500;
		double Kam_L = 562;
		double S = 20;
		double l = 350;
		double l2 = 1750;
		double l3 = 6390;
	};

	/*
	
	struct ConfigParams_IU
	{
		std::string name;
		double p;      //давление
		double diam;   //внутренний диаметр кожуха
		double Length; //длина кожуха
		double D_Kam;  //внутренний диаметр камеры
		double Kam_L;  //длина камеры
		double S;      //толщина обечайки
		double l;      //расстояния от эл днища до фланцев
		double l2;
		double l3;
	};*/

	struct data_fluidProperties {
		std::string name;     // 0 - Наименование
		double p;             // 1 - Плотность
		double c;		      // 2 - Коэффициент теплопроводности (кДЖ/ кг*C)
		double laymbda;	      // 3 - Коэффициент линейного расширения вещества (Вт/ м*C)
		double u_viscocity;	  // 4 - Коэффициент динамической взякости (Есть не у всех, если что высчитывается, если 0 ) (Па/с)
		double viscocity;	  // 5 - Коэффициент кинематической взякости (Есть не у всех, если что высчитывается, если 0 ) (м2/с)
		double capacity;	  // 6 - Теплоёмкость
		double Pr;			  // 7 - Теплоёмкость
	};


	struct data_fluidPrs_IU_IP {
		std::string name;
		double density;    //плотность в кг/м3
		double viscosity;  //вязкость (м2/c)
		double c;          //теплоемкость
	};

	/*
	//IU/IP нагреваемая среда (в трубах)
	struct data_fluidPrs_N {
		std::string name;
		double density;    //плотность
		double viscosity;  //вязкость
	};

	
	//IU/IP греющая среда (межтруб)
	struct data_fluidPrs_G {
		std::string name;
		double density;    //плотность
		double viscosity;  //вязкость
	};*/

	struct data_materialProperties {
		std::string name;				// 0 - Наименование
		double tMaterial;               // 1 - При какой температуре коэффициентр теплопроводности
		double laymbdaMateral;		    // 2 - Коэффициент теплопроводности (Вт/ m*c)
	};
	
	struct data_tubeProperties {
		double d1_diam;				// 0 - Диаметр трубы внутри
		double d2_diam;				// 1 - Диаметр трубы снаружи
		double L_length;			// 4 - Длина трубы
	};
}